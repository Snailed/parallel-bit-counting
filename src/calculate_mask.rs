use crate::count_ones::Word;

pub trait GetMask: Sized {
    fn get_mask() -> [[Self; 8]; 8];
}
impl GetMask for u16 {
    fn get_mask() -> [[u16; 8]; 8] {
        get_mask(get_basic_masks_u16())
    }
}
impl GetMask for u32 {
    fn get_mask() -> [[u32; 8]; 8] {
        get_mask(get_basic_masks_u32())
    }
}
impl GetMask for u64 {
    fn get_mask() -> [[u64; 8]; 8] {
        get_mask(get_basic_masks_u64())
    }
}
impl GetMask for u128 {
    fn get_mask() -> [[u128; 8]; 8] {
        get_mask(get_basic_masks_u128())
    }
}

#[inline(always)]
pub fn get_basic_masks_u128() -> [u128; 8] {
    [
        0b01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101u128,
        0b00110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011u128,
        0b00001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111u128,
        0b00000000111111110000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000011111111u128,
        0b00000000000000001111111111111111000000000000000011111111111111110000000000000000111111111111111100000000000000001111111111111111u128,
        0b00000000000000000000000000000000111111111111111111111111111111110000000000000000000000000000000011111111111111111111111111111111u128,
        0b00000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111u128,
        0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111u128
    ]
}

#[inline(always)]
pub fn get_basic_masks_u64() -> [u64; 8] {
    [
        0b0101010101010101010101010101010101010101010101010101010101010101u64,
        0b0011001100110011001100110011001100110011001100110011001100110011u64,
        0b0000111100001111000011110000111100001111000011110000111100001111u64,
        0b0000000011111111000000001111111100000000111111110000000011111111u64,
        0b0000000000000000111111111111111100000000000000001111111111111111u64,
        0b0000000000000000000000000000000011111111111111111111111111111111u64,
        0b1111111111111111111111111111111111111111111111111111111111111111u64,
        0b1111111111111111111111111111111111111111111111111111111111111111u64,
    ]
}

#[inline(always)]
pub fn get_basic_masks_u32() -> [u32; 8] {
    [
        0b01010101010101010101010101010101u32,
        0b00110011001100110011001100110011u32,
        0b00001111000011110000111100001111u32,
        0b00000000111111110000000011111111u32,
        0b00000000000000001111111111111111u32,
        0b11111111111111111111111111111111u32,
        0b11111111111111111111111111111111u32,
        0b11111111111111111111111111111111u32,
    ]
}
#[inline(always)]
pub fn get_basic_masks_u16() -> [u16; 8] {
    [
        0b0101010101010101u16,
        0b0011001100110011u16,
        0b0000111100001111u16,
        0b0000000011111111u16,
        0b1111111111111111u16,
        0b1111111111111111u16,
        0b1111111111111111u16,
        0b1111111111111111u16,
    ]
}

pub fn get_mask<T: Word>(basic_masks: [T; 8]) -> [[T; 8]; 8] {
    let mut array: [[T; 8]; 8] = [[T::zero(); 8]; 8];
    for i in 0..8 {
        for j in 0..8 {
            if j > i {
                array[i][j] = basic_masks[i];
                for k in i..j {
                    array[i][j] = array[i][j] & basic_masks[k];
                }
            }
        }
    }
    array
}

#[test]
fn test_mask_u128() {
    let masks = u128::get_mask();
    // Simple m_i,i+1 tests
    assert_eq!(
        masks[0][1],
        0b01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101u128,
    );
    assert_eq!(
        masks[1][2],
        0b00110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011u128,
    );
    assert_eq!(
        masks[2][3],
        0b00001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111u128,
    );
    assert_eq!(
        masks[3][4],
        0b00000000111111110000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000011111111u128,
    );
    assert_eq!(
        masks[4][5],
        0b00000000000000001111111111111111000000000000000011111111111111110000000000000000111111111111111100000000000000001111111111111111u128,
    );
    assert_eq!(
        masks[5][6],
        0b00000000000000000000000000000000111111111111111111111111111111110000000000000000000000000000000011111111111111111111111111111111u128
    );
    assert_eq!(
        masks[6][7],
        0b00000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111u128
    );
}

#[test]
fn test_mask_u64() {
    let masks = u64::get_mask();
    // Simple m_i,i+1 tests
    assert_eq!(
        masks[0][1],
        0b0101010101010101010101010101010101010101010101010101010101010101u64
    );
    assert_eq!(
        masks[1][2],
        0b0011001100110011001100110011001100110011001100110011001100110011u64
    );
    assert_eq!(
        masks[2][3],
        0b0000111100001111000011110000111100001111000011110000111100001111u64
    );
    assert_eq!(
        masks[3][4],
        0b0000000011111111000000001111111100000000111111110000000011111111u64
    );
    assert_eq!(
        masks[4][5],
        0b0000000000000000111111111111111100000000000000001111111111111111u64
    );
    assert_eq!(
        masks[5][6],
        0b0000000000000000000000000000000011111111111111111111111111111111u64
    );
}
